/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package thogakade.view.download;

import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeCellEditor;
import thogakade.Shared.Shared;
import thogakade.controllers.DBController;
import thogakade.handler.Downloader;
import thogakade.model.Link;
import thogakade.model.SettingsData;
import thogakade.view.Main;

/**
 *
 * @author cmjd
 */
public class Help extends javax.swing.JInternalFrame {

    private static long LOOP_LENGTH = 85000000;
    Link link = null;
    private static Timer timer = null;

    /**
     * Creates new form CreateOrder
     */
    public Help() {
        initComponents();
        SimpleDateFormat df = new SimpleDateFormat(Shared.DF_TRANSACTION_DATE_FORMAT);
        //jTable1 = new JTable();
        //tfDescription.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/thogakade/icon/4206344.png"))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Info", 0, 0, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(0, 24, 255))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thogakade/icon/4206344.png"))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setText("Dark Downloader ");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setText("Version  1.0.0");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setText("Copyright Â© The Dark (PVT) LTD");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setText("For More Details:");

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setText("downloaderdark@gmail.com ");

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setText("All Rights Reserved");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(149, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 24, Short.MAX_VALUE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)))
                .addContainerGap(205, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private static class DownloadTask implements Runnable {

        Help dl = new Help();
        ArrayList<Link> list = null;
        DefaultTableModel tblModel = null;
        Link link = null;
        private JTable table;
        private JProgressBar progressBar;

        public DownloadTask(Link link, DefaultTableModel tblModel, JTable table, JProgressBar progressBar) {
            System.out.println("Call DownloadTask ");
            this.link = link;
            this.tblModel = tblModel;
            this.table = table;
            this.progressBar = progressBar;
        }

        @Override
        public void run() {
            try {
                 System.out.println("Call DownloadTask run");
                // surround with try-catch if downloadFile() throws something
                int row = link.getId() - 1;
                link.setStatus(Shared.STATUS_DOWNLOADING);
                tblModel.setValueAt(link.getStatus(), row, 2);
                table.updateUI();
                dl.downloadFileNormal(link);
                link.setStatus(Shared.STATUS_COMPLETED);
                tblModel.setValueAt(link.getStatus(), row, 2);
                table.updateUI();
                updateProgress(progressBar, link.getCompleteFactor());

                System.out.println("Finish");
            } catch (IOException ex) {
                Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static void updateProgress(final JProgressBar progressBar, final double factor) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                System.out.println("progressBar.getValue()" + progressBar.getValue());
                System.out.println("(int)Math.round(factor)" + (int) Math.round(factor));
                progressBar.setValue(progressBar.getValue() + (int) Math.round(factor));
                System.out.println(Thread.currentThread().getName() + " Update progress " + progressBar.getValue());
            }
        });

    }

    private static class MyTimeTask extends TimerTask {

        DefaultTableModel tblModel = null;
        Date sheduleDatetime = null;
        ArrayList<Link> list = null;

        MyTimeTask(DefaultTableModel tblModel, ArrayList<Link> list) {
            this.tblModel = tblModel;
            this.list = list;
        }

        public void run() {
            System.out.println("Running Task");
            Downloader downloader = new Downloader();
            Help schduler = new Help();
            try {
                //schduler.cloackHandler(sheduleDatetime.toString());
                schduler.downloadFileSchdule(false, tblModel, list);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
            }
            timer.cancel();
        }
    }

    public boolean isValidDate(Date pDateString) throws ParseException {
        System.out.println("download date time" + pDateString);
        return new Date().before(pDateString);
    }
    Runnable r = new Runnable() {
        @Override
        public void run() {
            try {
                //run task here
                if (link.getStatus() != null && !link.getStatus().isEmpty() && link.getStatus().equals(Shared.STATUS_DOWNLOADING)) {
                    downloadFileNormal(link);
                    Thread.sleep(10000);
                }
            } catch (IOException ex) {
                Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    };

    public void downloadFileSchdule(boolean iscancel, DefaultTableModel tblModel, ArrayList<Link> listobj) throws IOException, ClassNotFoundException, SQLException, InterruptedException {
        DBController con = new DBController();
        String home = System.getProperty("user.home");
        File file = new File(home + "/Downloads/");
        String filepath = file.getPath();
        ReadableByteChannel rbc = null;
        FileOutputStream fos = null;

        SimpleDateFormat df = new SimpleDateFormat("ddMMyy-hhmmss.SSS");
        ArrayList<Link> returnlist = new ArrayList<>();
        // ArrayList<Link> list = con.getLinksForSchedule();
        ArrayList<Link> list = listobj;
        ExecutorService pool = Executors.newFixedThreadPool(list.size());
        for (Link link : list) {
            System.out.println("List call");
        }
        pool.shutdown();
        pool.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);

    }

    void startDownload(Link link, DefaultTableModel tblModel, int i) {
        //this.getParent().add(jb).setVisible(true);
        // iterate(list);
        Downloader dl = new Downloader();
        try {
            link.setStatus(Shared.STATUS_DOWNLOADING);
            tblModel.setValueAt(link.getStatus(), i, 1);
            System.out.println("DL link");
            downloadFileNormal(link);
            link.setStatus(Shared.STATUS_COMPLETED);
            tblModel.setValueAt(link.getStatus(), i, 1);
            Thread.sleep(1000);
            System.out.println("link:" + link.getLink());
        } catch (IOException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void downloadFileNormal(Link link) throws IOException, ClassNotFoundException, SQLException {
        System.out.println("downloading....start");
        DBController con = new DBController();
        String home = System.getProperty("user.home");
        SimpleDateFormat df = new SimpleDateFormat("ddMMyy-hhmmss.SSS");
        String filename = "file_" + df.format(new Date());
        File file = new File(home + "/Downloads/");
        System.out.println("OS " + System.getProperty("os.name"));
        if (!System.getProperty("os.name").toLowerCase().startsWith("windows") && file.exists()) {
            setPermission(file);
            file.canExecute();
            file.canRead();
            file.canWrite();
            System.out.println("canExecute" + file.canExecute());
            System.out.println("canRead" + file.canRead());
            System.out.println("canWrite" + file.canWrite());

        }
        String filepath = file.getPath();
        System.out.println("filepath" + filepath);
        PrintWriter batchScript = new PrintWriter(new BufferedWriter(new FileWriter("replace.sh")));
        batchScript.println("cd " + filepath);
        batchScript.println("chmod 777 " + filename);
        batchScript.println("exit 0");
        batchScript.close();
        ArrayList<Link> returnlist = new ArrayList<>();
        if (link != null) {
            Link object = link;
            String filetype = filetype(object.getLink());
            filepath = filepath + "/" + filename + filetype;
            System.out.println("Download  LInk" + object.getLink());
            System.out.println("filepath" + filepath);
            boolean isdownload = false;
            try {
                ReadableByteChannel rbc = null;
                FileOutputStream fos = null;
                URL url = new URL(object.getLink());
                rbc = Channels.newChannel(url.openStream());
                fos = new FileOutputStream(filepath);
                fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
                isdownload = true;
                object.setStatus(Shared.STATUS_COMPLETED);
                fos.close();
                rbc.close();
                Runtime.getRuntime().exec("chmod 777 replace.sh");
                Runtime.getRuntime().exec("rm " + "replace.sh");
            } catch (Exception e) {
                object.setStatus(Shared.STATUS_FAILD);
                isdownload = false;
            } finally {
                // con.updateLink(object);
            }

        }
        System.out.println("downloading....end");

    }

    public void setPermission(File file) throws IOException {
        Set<PosixFilePermission> perms = new HashSet<>();
        perms.add(PosixFilePermission.OWNER_READ);
        perms.add(PosixFilePermission.OWNER_WRITE);
        perms.add(PosixFilePermission.OWNER_EXECUTE);

        perms.add(PosixFilePermission.OTHERS_READ);
        perms.add(PosixFilePermission.OTHERS_WRITE);
        perms.add(PosixFilePermission.OTHERS_EXECUTE);

        perms.add(PosixFilePermission.GROUP_READ);
        perms.add(PosixFilePermission.GROUP_WRITE);
        perms.add(PosixFilePermission.GROUP_EXECUTE);

        Files.setPosixFilePermissions(file.toPath(), perms);
    }    private void validateObject() {
        try {
            DBController controller = new DBController();
            SettingsData settings = controller.searchSetting(Shared.FIRE_TIME);
            SettingsData settings2 = controller.searchSetting(Shared.DL_LOCATION);
            boolean islocationset = false;
            boolean istimeset = false;
            if (settings != null && settings.getValue() != null && !settings.getValue().isEmpty()) {
                istimeset = true;
            }
            if (settings2 != null && settings2.getValue() != null && !settings2.getValue().isEmpty()) {
                islocationset = true;
            }
            if (istimeset == false && islocationset == false) {
                JOptionPane.showMessageDialog(this, "Please set the  download location and download start time");
            } else if (istimeset == false && islocationset == true) {
                JOptionPane.showMessageDialog(this, "Please set the  download start time");

            } else if (istimeset == true && islocationset == false) {
                JOptionPane.showMessageDialog(this, "Please set the  download location ");

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String filetype(String url) {
        String filetype = ".mp4";
        if (url.contains(".mp3")) {
            filetype = ".mp3";
        } else if (url.contains(".mp4")) {
            filetype = ".mp4";
        } else if (url.contains(".pdf")) {
            filetype = ".pdf";
        } else if (url.contains(".docx")) {
            filetype = ".docx";
        } else if (url.contains(".aif")) {
            filetype = ".aif";
        } else if (url.contains(".cda")) {
            filetype = ".cda";
        } else if (url.contains(".mid")) {
            filetype = ".mid";
        } else if (url.contains(".midi")) {
            filetype = ".midi";
        } else if (url.contains(".mpa")) {
            filetype = ".mpa";
        } else if (url.contains(".ogg")) {
            filetype = ".ogg";
        } else if (url.contains(".wav")) {
            filetype = ".wav";
        } else if (url.contains(".wma")) {
            filetype = ".wma";
        } else if (url.contains(".wpl")) {
            filetype = ".wpl";
        } else if (url.contains(".7z")) {
            filetype = ".7z";
        } else if (url.contains(".arj")) {
            filetype = ".arj";
        } else if (url.contains(".deb")) {
            filetype = ".deb";
        } else if (url.contains(".pkg")) {
            filetype = ".pkg";
        } else if (url.contains(".deb")) {
            filetype = ".deb";
        } else if (url.contains(".rar")) {
            filetype = ".rar";
        } else if (url.contains(".rpm")) {
            filetype = ".rpm";
        } else if (url.contains(".tar.gz ")) {
            filetype = ".tar.gz ";
        } else if (url.contains(".zip")) {
            filetype = ".zip";
        } else if (url.contains(".bin")) {
            filetype = ".bin";
        } else if (url.contains(".dmg")) {
            filetype = ".dmg";
        } else if (url.contains(".iso")) {
            filetype = ".iso";
        } else if (url.contains(".toast")) {
            filetype = ".toast";
        } else if (url.contains(".vcd")) {
            filetype = ".vcd";
        } else if (url.contains(".csv")) {
            filetype = ".csv";
        } else if (url.contains(".dat")) {
            filetype = ".dat";
        } else if (url.contains(".db")) {
            filetype = ".db";
        } else if (url.contains(".dbf")) {
            filetype = ".dbf";
        } else if (url.contains(".log")) {
            filetype = ".log";
        } else if (url.contains(".mdb")) {
            filetype = ".mdb";
        } else if (url.contains(".sav")) {
            filetype = ".sav";
        } else if (url.contains(".sql")) {
            filetype = ".sql";
        } else if (url.contains(".tar")) {
            filetype = ".tar";
        } else if (url.contains(".xml")) {
            filetype = ".xml";
        } else if (url.contains(".email")) {
            filetype = ".email";
        } else if (url.contains(".apk")) {
            filetype = ".apk";
        } else if (url.contains(".bat")) {
            filetype = ".bat";
        } else if (url.contains(".exe")) {
            filetype = ".exe";
        } else if (url.contains(".jpeg")) {
            filetype = ".jpeg";
        } else if (url.contains(".jpg")) {
            filetype = ".jpg";
        } else if (url.contains(".png")) {
            filetype = ".png";
        }
        return filetype;
    }

    public class ProgressWorker extends SwingWorker<Void, Integer> {

        private final JProgressBar progress;

        public ProgressWorker(JProgressBar progress) {
            this.progress = progress;
        }

        @Override
        protected Void doInBackground() throws Exception {
            for (long i = LOOP_LENGTH; i > 0; i--) {
                final int progr = (int) ((100L * (LOOP_LENGTH - i)) / LOOP_LENGTH);
                publish(progr);
            }
            return null;
        }

        @Override
        protected void process(List<Integer> chunks) {
            progress.setValue(chunks.get(chunks.size() - 1));
            super.process(chunks);
        }

        @Override
        protected void done() {
            progress.setValue(100);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
