/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package thogakade.view.download;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.nio.file.attribute.PosixFilePermission;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FilenameUtils;
import thogakade.Shared.Shared;
import thogakade.controllers.DBController;
import thogakade.handler.Downloader;
import thogakade.model.Link;
import thogakade.model.SettingsData;
import thogakade.view.Main;

/**
 *
 * @author cmjd
 */
public class Download extends javax.swing.JInternalFrame {

    private static long LOOP_LENGTH = 85000000;
    Link link = null;

    /**
     * Creates new form CreateOrder
     */
    public Download() {
        initComponents();
        if (System.getProperty("os.name").toLowerCase().startsWith("mac os x")) {
            jLabel7.setText("Note:please use ctrl+v to paste the url");
            jLabel7.setVisible(true);
        }
        String home = System.getProperty("user.home");
        File file = new File(home + "/Downloads/");
        String filepath = file.getPath();
        tflocation.setText(filepath);
               // dlStartTIme.setBorder(BorderFactory.createLineBorder(Color.white));

        //jTable1 = new JTable();
        //tfDescription.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tfDescription = new javax.swing.JTextField();
        addSubmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btSubmit1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tflocation = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btlocation = new javax.swing.JButton();
        btSubmit2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/thogakade/icon/4206344.png"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Real Time Downloader");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Insert downloadable URL", 0, 0, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(0, 24, 255))); // NOI18N

        jLabel5.setText("Downloadable Link");

        tfDescription.setBackground(new java.awt.Color(255, 255, 255));
        tfDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDescriptionActionPerformed(evt);
            }
        });

        addSubmit.setBackground(new java.awt.Color(255, 255, 255));
        addSubmit.setText("Enter URL");
        addSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubmitActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(182, 36, 36));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(197, 58, 58));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 613, Short.MAX_VALUE))
                    .addComponent(tfDescription, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(addSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(addSubmit)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inserted URLs", 0, 0, new java.awt.Font("Dialog", 0, 12), java.awt.Color.blue)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Downloadable URLs", "Download Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setMinWidth(150);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(200);
        }

        btSubmit1.setBackground(new java.awt.Color(255, 255, 255));
        btSubmit1.setText("Delete URL");
        btSubmit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSubmit1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btSubmit1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSubmit1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Submit", 0, 0, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(0, 24, 255))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(182, 36, 36));

        tflocation.setBackground(new java.awt.Color(255, 255, 255));
        tflocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tflocationActionPerformed(evt);
            }
        });

        jLabel6.setText("Download Location:");

        btlocation.setBackground(new java.awt.Color(255, 255, 255));
        btlocation.setForeground(new java.awt.Color(80, 148, 202));
        btlocation.setText("Browse");
        btlocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlocationActionPerformed(evt);
            }
        });

        btSubmit2.setBackground(new java.awt.Color(255, 255, 255));
        btSubmit2.setText(" Start Download");
        btSubmit2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSubmit2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(192, 192, 192))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tflocation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btSubmit2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(btlocation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tflocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btlocation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSubmit2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubmitActionPerformed
        String link = tfDescription.getText();
        if (link == null || link.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter valid url");
        } else if ((link.startsWith("http")) || (link.startsWith("https"))) {
            //String data[] = {link};
            DefaultTableModel tblmodel = (DefaultTableModel) jTable1.getModel();

            Object rowData[] = new Object[3];
            rowData[0] = tblmodel.getRowCount() + 1;
            rowData[1] = link;
            rowData[2] = Shared.STATUS_PENDING;
            tblmodel.addRow(rowData);

        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Valid URL");

        }
        tfDescription.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_addSubmitActionPerformed

    private void btSubmit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSubmit1ActionPerformed
        // TODO add your handling code here:De\\\
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        if (jTable1.getSelectedRowCount() == 1) {
            tblModel.removeRow(jTable1.getSelectedRow());
        } else if (jTable1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Table is empty");
        } else {
            JOptionPane.showMessageDialog(this, "Please select single row for delete");
        }
    }//GEN-LAST:event_btSubmit1ActionPerformed

    private void btSubmit2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSubmit2ActionPerformed
        try {
            String schduletime = null;
            ArrayList<Link> list = new ArrayList<>();
            int value = 1;
            DBController conn = new DBController();
            DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
            LOOP_LENGTH = tblModel.getRowCount();
            String downloadlocation = tflocation.getText();
            // jProgressBar1.setMaximum(tblModel.getRowCount());
            double completeFactor = 1d;
            Date date = new Date();
            SimpleDateFormat df = new SimpleDateFormat(Shared.DF_TRANSACTION_DATE_FORMAT);
            schduletime = df.format(date);
            System.out.println("Complete factor " + completeFactor);
            for (int count = 0; count < tblModel.getRowCount(); count++) {
                Link link = new Link();
                //  System.out.println("count" + count);
                link.setId(Integer.parseInt(tblModel.getValueAt(count, 0).toString()));
                link.setLink(tblModel.getValueAt(count, 1).toString());
                link.setStatus(Shared.STATUS_PENDING);
                tblModel.setValueAt(link.getStatus(), count, 2);
                link.setType(Shared.DL_TYPE_NORMAL);
                link.setCompleteFactor(completeFactor);
                link.setDownloadtime(schduletime);
                list.add(link);
                // this.link = link;
                // System.out.println("DL link");
                // Thread t = new Thread();
                //  t.start();
                //  link.setStatus(Shared.STATUS_COMPLETED);
                // tblModel.setValueAt(link.getStatus(), count, 1);
                System.out.println(value);
            }
            if (list.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Url list empty");
            } else {
                conn.addLinks(list);
                conn.addDownloadDetails(date);
             //   JOptionPane.showMessageDialog(this, "Successfully submitted!");
                setVisible(false);
                DownloadProgressForNormal progress = new DownloadProgressForNormal(list, date, downloadlocation);
                this.getParent().add(progress).setVisible(true);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btSubmit2ActionPerformed
    private static class DownloadTask implements Runnable {

        Download dl = new Download();
        ArrayList<Link> list = null;
        DefaultTableModel tblModel = null;
        Link link = null;
        private JTable table;
        private JProgressBar progressBar;

        public DownloadTask(Link link, DefaultTableModel tblModel, JTable table, JProgressBar progressBar) {
            this.link = link;
            this.tblModel = tblModel;
            this.table = table;
            this.progressBar = progressBar;
        }

        @Override
        public void run() {
            try {
                // surround with try-catch if downloadFile() throws something
                int row = link.getId() - 1;
                link.setStatus(Shared.STATUS_DOWNLOADING);
                tblModel.setValueAt(link.getStatus(), row, 2);
                table.updateUI();
                dl.downloadFileNormal(link);
                link.setStatus(Shared.STATUS_COMPLETED);
                tblModel.setValueAt(link.getStatus(), row, 2);
                table.updateUI();
                updateProgress(progressBar, link.getCompleteFactor());

                System.out.println("Finish");
            } catch (IOException ex) {
                Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public static void updateProgress(final JProgressBar progressBar, final double factor) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                System.out.println("progressBar.getValue()" + progressBar.getValue());
                System.out.println("(int)Math.round(factor)" + (int) Math.round(factor));
                progressBar.setValue(progressBar.getValue() + (int) Math.round(factor));
                System.out.println(Thread.currentThread().getName() + " Update progress " + progressBar.getValue());
            }
        });

    }

    Runnable r = new Runnable() {
        @Override
        public void run() {
            try {
                //run task here
                if (link.getStatus() != null && !link.getStatus().isEmpty() && link.getStatus().equals(Shared.STATUS_DOWNLOADING)) {
                    downloadFileNormal(link);
                    Thread.sleep(10000);
                }
            } catch (IOException ex) {
                Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    };

    void startDownload(Link link, DefaultTableModel tblModel, int i) {
        //this.getParent().add(jb).setVisible(true);
        // iterate(list);
        Downloader dl = new Downloader();
        try {
            link.setStatus(Shared.STATUS_DOWNLOADING);
            tblModel.setValueAt(link.getStatus(), i, 1);
            System.out.println("DL link");
            downloadFileNormal(link);
            link.setStatus(Shared.STATUS_COMPLETED);
            tblModel.setValueAt(link.getStatus(), i, 1);
            Thread.sleep(1000);
            System.out.println("link:" + link.getLink());
        } catch (IOException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void downloadFileNormal(Link link) throws IOException, ClassNotFoundException, SQLException {
        System.out.println("downloading....start");
        String urllink = null;
        DBController con = new DBController();
        String home = System.getProperty("user.home");
        SimpleDateFormat df = new SimpleDateFormat(Shared.DB_TRANSACTION_DATE_FORMAT);
        String filename = "file_" + df.format(new Date());
        File file = new File(home + "/Downloads/");
        System.out.println("OS " + System.getProperty("os.name"));
        if (!System.getProperty("os.name").toLowerCase().startsWith("windows") && file.exists()) {
            setPermission(file);
            file.canExecute();
            file.canRead();
            file.canWrite();
            System.out.println("canExecute" + file.canExecute());
            System.out.println("canRead" + file.canRead());
            System.out.println("canWrite" + file.canWrite());

        }
        String filepath = file.getPath();
        System.out.println("filepath" + filepath);
        PrintWriter batchScript = new PrintWriter(new BufferedWriter(new FileWriter("replace.sh")));
        batchScript.println("cd " + filepath);
        batchScript.println("chmod 777 " + filename);
        batchScript.println("exit 0");
        batchScript.close();
        ArrayList<Link> returnlist = new ArrayList<>();
        if (link != null) {

            Link object = link;
            urllink = object.getLink();
            String filetype = filetype(object.getLink());
            filepath = filepath + "/" + filename + filetype;
            System.out.println("Download  LInk" + object.getLink());
            System.out.println("filepath" + filepath);
            boolean isdownload = false;
            try {
                ReadableByteChannel rbc = null;
                FileOutputStream fos = null;
                URL url = new URL(object.getLink());
                rbc = Channels.newChannel(url.openStream());
                fos = new FileOutputStream(filepath);
                fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
                isdownload = true;
                object.setStatus(Shared.STATUS_COMPLETED);
                fos.close();
                rbc.close();
                Runtime.getRuntime().exec("chmod 777 replace.sh");
                Runtime.getRuntime().exec("rm " + "replace.sh");
            } catch (Exception e) {

                // This will get input data from the server
                InputStream inputStream = null;

                // This will read the data from the server;
                OutputStream outputStream = null;

                try {
                    // This will open a socket from client to server
                    URL url = new URL(urllink);

                    // This user agent is for if the server wants real humans to visit
                    String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36";

                    // This socket type will allow to set user_agent
                    URLConnection urlcon = url.openConnection();

                    // Setting the user agent
                    urlcon.setRequestProperty("User-Agent", USER_AGENT);

                    //Getting content Length
                    int contentLength = urlcon.getContentLength();
                    System.out.println("File contentLength = " + contentLength + " bytes");

                    // Requesting input data from server
                    inputStream = urlcon.getInputStream();

                    // Open local file writer
                    filetype = filetype(urllink);
                    if (filetype.isEmpty()) {
                        filetype = FilenameUtils.getExtension(url.getPath());
                    }
                    filepath = filepath + filename + filetype;

                    outputStream = new FileOutputStream(filepath);

                    // Limiting byte written to file per loop
                    byte[] buffer = new byte[2048];

                    // Increments file size
                    int length;
                    int downloaded = 0;

                    // Looping until server finishes
                    while ((length = inputStream.read(buffer)) != -1) {
                        // Writing data
                        outputStream.write(buffer, 0, length);
                        downloaded += length;
                        //System.out.println("Downlad Status: " + (downloaded * 100) / (contentLength * 1.0) + "%");

                    }
                    object.setStatus(Shared.STATUS_COMPLETED);
                } catch (Exception ex) {
                    object.setStatus(Shared.STATUS_FAILD);
                    isdownload = false;
                    //Logger.getLogger(WebCrawler.class.getName()).log(Level.SEVERE, null, ex);
                }

                // closing used resources
                // The computer will not be able to use the image
                // This is a must
                outputStream.close();
                inputStream.close();

            } finally {
                // con.updateLink(object);
            }

        }
        System.out.println("downloading....end");

    }

    public void setPermission(File file) throws IOException {
        Set<PosixFilePermission> perms = new HashSet<>();
        perms.add(PosixFilePermission.OWNER_READ);
        perms.add(PosixFilePermission.OWNER_WRITE);
        perms.add(PosixFilePermission.OWNER_EXECUTE);

        perms.add(PosixFilePermission.OTHERS_READ);
        perms.add(PosixFilePermission.OTHERS_WRITE);
        perms.add(PosixFilePermission.OTHERS_EXECUTE);

        perms.add(PosixFilePermission.GROUP_READ);
        perms.add(PosixFilePermission.GROUP_WRITE);
        perms.add(PosixFilePermission.GROUP_EXECUTE);

        Files.setPosixFilePermissions(file.toPath(), perms);
    }
    private void tfDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDescriptionActionPerformed
        tfDescription.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    System.out.println("aaaa");
                    String link = tfDescription.getText();
                    if (link == null || link.isEmpty()) {
                        //JOptionPane.showMessageDialog(this, "Please enter valid url");
                    } else if ((link.startsWith("http")) || (link.startsWith("https"))) {
                        //String data[] = {link};
                        DefaultTableModel tblmodel = (DefaultTableModel) jTable1.getModel();

                        Object rowData[] = new Object[3];
                        rowData[0] = tblmodel.getRowCount() + 1;
                        rowData[1] = link;
                        rowData[2] = Shared.STATUS_PENDING;
                        tblmodel.addRow(rowData);

                    } else {
                        //  JOptionPane.showMessageDialog(this, "Please Enter Valid URL");

                    }
                    tfDescription.setText("");
                }
            }
        });
    }//GEN-LAST:event_tfDescriptionActionPerformed

    private void tflocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tflocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tflocationActionPerformed

    private void btlocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlocationActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        // chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());
            File file = chooser.getSelectedFile();
            tflocation.setText(file.getAbsolutePath());
        } else {
            System.out.println("No Selection ");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_btlocationActionPerformed
    private void validateObject() {
        try {
            DBController controller = new DBController();
            SettingsData settings = controller.searchSetting(Shared.FIRE_TIME);
            SettingsData settings2 = controller.searchSetting(Shared.DL_LOCATION);
            boolean islocationset = false;
            boolean istimeset = false;
            if (settings != null && settings.getValue() != null && !settings.getValue().isEmpty()) {
                istimeset = true;
            }
            if (settings2 != null && settings2.getValue() != null && !settings2.getValue().isEmpty()) {
                islocationset = true;
            }
            if (istimeset == false && islocationset == false) {
                JOptionPane.showMessageDialog(this, "Please set the  download location and download start time");
            } else if (istimeset == false && islocationset == true) {
                JOptionPane.showMessageDialog(this, "Please set the  download start time");

            } else if (istimeset == true && islocationset == false) {
                JOptionPane.showMessageDialog(this, "Please set the  download location ");

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String filetype(String url) {
        String filetype = ".mp4";
        if (url.contains(".mp3")) {
            filetype = ".mp3";
        } else if (url.contains(".mp4")) {
            filetype = ".mp4";
        } else if (url.contains(".pdf")) {
            filetype = ".pdf";
        } else if (url.contains(".docx")) {
            filetype = ".docx";
        } else if (url.contains(".aif")) {
            filetype = ".aif";
        } else if (url.contains(".cda")) {
            filetype = ".cda";
        } else if (url.contains(".mid")) {
            filetype = ".mid";
        } else if (url.contains(".midi")) {
            filetype = ".midi";
        } else if (url.contains(".mpa")) {
            filetype = ".mpa";
        } else if (url.contains(".ogg")) {
            filetype = ".ogg";
        } else if (url.contains(".wav")) {
            filetype = ".wav";
        } else if (url.contains(".wma")) {
            filetype = ".wma";
        } else if (url.contains(".wpl")) {
            filetype = ".wpl";
        } else if (url.contains(".7z")) {
            filetype = ".7z";
        } else if (url.contains(".arj")) {
            filetype = ".arj";
        } else if (url.contains(".deb")) {
            filetype = ".deb";
        } else if (url.contains(".pkg")) {
            filetype = ".pkg";
        } else if (url.contains(".deb")) {
            filetype = ".deb";
        } else if (url.contains(".rar")) {
            filetype = ".rar";
        } else if (url.contains(".rpm")) {
            filetype = ".rpm";
        } else if (url.contains(".tar.gz ")) {
            filetype = ".tar.gz ";
        } else if (url.contains(".zip")) {
            filetype = ".zip";
        } else if (url.contains(".bin")) {
            filetype = ".bin";
        } else if (url.contains(".dmg")) {
            filetype = ".dmg";
        } else if (url.contains(".iso")) {
            filetype = ".iso";
        } else if (url.contains(".toast")) {
            filetype = ".toast";
        } else if (url.contains(".vcd")) {
            filetype = ".vcd";
        } else if (url.contains(".csv")) {
            filetype = ".csv";
        } else if (url.contains(".dat")) {
            filetype = ".dat";
        } else if (url.contains(".db")) {
            filetype = ".db";
        } else if (url.contains(".dbf")) {
            filetype = ".dbf";
        } else if (url.contains(".log")) {
            filetype = ".log";
        } else if (url.contains(".mdb")) {
            filetype = ".mdb";
        } else if (url.contains(".sav")) {
            filetype = ".sav";
        } else if (url.contains(".sql")) {
            filetype = ".sql";
        } else if (url.contains(".tar")) {
            filetype = ".tar";
        } else if (url.contains(".xml")) {
            filetype = ".xml";
        } else if (url.contains(".email")) {
            filetype = ".email";
        } else if (url.contains(".apk")) {
            filetype = ".apk";
        } else if (url.contains(".bat")) {
            filetype = ".bat";
        } else if (url.contains(".exe")) {
            filetype = ".exe";
        } else if (url.contains(".jpeg")) {
            filetype = ".jpeg";
        } else if (url.contains(".jpg")) {
            filetype = ".jpg";
        } else if (url.contains(".png")) {
            filetype = ".png";
        }
        return filetype;
    }

    public class ProgressWorker extends SwingWorker<Void, Integer> {

        private final JProgressBar progress;

        public ProgressWorker(JProgressBar progress) {
            this.progress = progress;
        }

        @Override
        protected Void doInBackground() throws Exception {
            for (long i = LOOP_LENGTH; i > 0; i--) {
                final int progr = (int) ((100L * (LOOP_LENGTH - i)) / LOOP_LENGTH);
                publish(progr);
            }
            return null;
        }

        @Override
        protected void process(List<Integer> chunks) {
            progress.setValue(chunks.get(chunks.size() - 1));
            super.process(chunks);
        }

        @Override
        protected void done() {
            progress.setValue(100);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSubmit;
    private javax.swing.JButton btSubmit1;
    private javax.swing.JButton btSubmit2;
    private javax.swing.JButton btlocation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tfDescription;
    private javax.swing.JTextField tflocation;
    // End of variables declaration//GEN-END:variables
}
