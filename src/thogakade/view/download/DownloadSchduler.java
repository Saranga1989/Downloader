/*ZZ
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package thogakade.view.download;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.nio.file.attribute.PosixFilePermission;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import static java.util.concurrent.TimeUnit.SECONDS;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.plaf.DesktopPaneUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.commons.io.FilenameUtils;
import thogakade.Shared.Shared;
import thogakade.controllers.DBController;
import thogakade.db.DataBaseUpdater;
import thogakade.handler.Downloader;
import thogakade.model.Link;
import thogakade.model.SettingsData;
import thogakade.view.Main;
import static thogakade.view.download.Download.updateProgress;

/**
 *
 * @author cmjd
 */
public class DownloadSchduler extends javax.swing.JInternalFrame {

    public static Timer timer = null;
    ReadableByteChannel rbc = null;
    FileOutputStream fos = null;
    String filename = null;
    String filetype = null;
    DownloadProgress downloadprogress = null;
    ArrayList<ReadableByteChannel> chanellist = new ArrayList<>();
    ArrayList<FileOutputStream> fileoutlist = new ArrayList<>();
    SimpleDateFormat formatdate = new SimpleDateFormat(Shared.DF_TRANSACTION_DATE_FORMAT);
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    /**
     * Creates new form CreateOrder
     */
    public DownloadSchduler() {
        initComponents();
         if (System.getProperty("os.name").toLowerCase().startsWith("mac os x")) {
            jLabel9.setText("Note:please use ctrl+v to paste the url");
        }
        SimpleDateFormat df = new SimpleDateFormat(Shared.DF_TRANSACTION_DATE_FORMAT);
        tfScheduleTime.setText(df.format(new Date()));
        String home = System.getProperty("user.home");
        File file = new File(home + "/Downloads/");
        String filepath = file.getPath();
        tflocation.setText(filepath);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        tflocation = new javax.swing.JTextField();
        btlocation = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btSubmit2 = new javax.swing.JButton();
        tfScheduleTime = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btSubmit3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        tfDescription1 = new javax.swing.JTextField();
        addSubmit1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/thogakade/icon/4206344.png"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Schedule Downloader");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Submit Data", 0, 0, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(0, 24, 255))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(212, 75, 75));

        tflocation.setBackground(new java.awt.Color(255, 255, 255));
        tflocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tflocationActionPerformed(evt);
            }
        });

        btlocation.setBackground(new java.awt.Color(255, 255, 255));
        btlocation.setText("Browse");
        btlocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlocationActionPerformed(evt);
            }
        });

        jLabel6.setText("Download Location");

        btSubmit2.setBackground(new java.awt.Color(255, 255, 255));
        btSubmit2.setText("Submit For Download");
        btSubmit2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSubmit2ActionPerformed(evt);
            }
        });

        tfScheduleTime.setBackground(new java.awt.Color(255, 255, 255));
        tfScheduleTime.setText("yyyy-MM-dd HH:mm:ss");
        tfScheduleTime.setToolTipText("yyyy-MM-dd HH:mm:ss");

        jLabel2.setText("Download Start Time");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(tfScheduleTime, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(365, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btSubmit2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(tflocation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btlocation, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfScheduleTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tflocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btlocation)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(btSubmit2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Downloadable  URLs", 0, 0, new java.awt.Font("Dialog", 0, 12), java.awt.Color.blue)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Downloadable  Urls", "Download Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setMinWidth(150);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        btSubmit3.setBackground(new java.awt.Color(255, 255, 255));
        btSubmit3.setText("Delete URL");
        btSubmit3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSubmit3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 863, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btSubmit3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSubmit3)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Insert downloadable URL", 0, 0, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(0, 24, 255))); // NOI18N

        jLabel7.setText("Download Link");

        tfDescription1.setBackground(new java.awt.Color(255, 255, 255));
        tfDescription1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDescription1ActionPerformed(evt);
            }
        });

        addSubmit1.setBackground(new java.awt.Color(255, 255, 255));
        addSubmit1.setText("Enter URL");
        addSubmit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubmit1ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(212, 75, 75));

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(185, 58, 58));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfDescription1)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                        .addComponent(addSubmit1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addSubmit1)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(412, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public boolean isValidDate(Date pDateString) throws ParseException {
        System.out.println("download date time" + pDateString);
        return new Date().before(pDateString);
    }
    private void btSubmit2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSubmit2ActionPerformed
        // TODO add your handling code here:'    /
        //tfScheduleTime.setText("");
        SimpleDateFormat df = new SimpleDateFormat(Shared.DF_TRANSACTION_DATE_FORMAT);
        String scheduletime = tfScheduleTime.getText();
        //    nowtime.setText(df.format(new Date()));
        String locationdlpath = tflocation.getText();
        Date sheduleDatetime = null;
        if (scheduletime != null && !scheduletime.isEmpty()) {
            try {
                sheduleDatetime = df.parse(scheduletime);
            } catch (ParseException ex) {
                sheduleDatetime = null;
                Logger.getLogger(DownloadSchduler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("sheduleDatetime:" + sheduleDatetime);
        ArrayList<Link> list = new ArrayList<>();
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        double completeFactor = 1d;
        for (int count = 0; count < tblModel.getRowCount(); count++) {
            Link link = new Link();
            link.setLink(tblModel.getValueAt(count, 0).toString());
            link.setStatus(Shared.STATUS_PENDING);
            link.setId(count + 1);
            tblModel.setValueAt(link.getStatus(), count, 1);
            link.setType(Shared.DL_TYPE_SCHDULE);
            link.setDownloadtime(scheduletime);
            link.setCompleteFactor(completeFactor);
            list.add(link);
        }
//        jProgressBar1.setMaximum(list.size());

        if (sheduleDatetime != null) {
            try {
                tfScheduleTime.setText(df.format(sheduleDatetime));
                if (isValidDate(sheduleDatetime)) {
                    if (list != null && list.size() > 0) {
                        //      count.setText((list.size()) + "");
                        DBController controller = new DBController();
                        try {
                            // timer = new Timer();
                            controller.addLinks(list);
                            controller.addDownloadDetails(sheduleDatetime);
                            //  timer.schedule(new DownloadSchduler.MyTimeTask(list,df.format(sheduleDatetime)), sheduleDatetime);
                            JOptionPane.showMessageDialog(this, "Successfully submitted!");
                            setVisible(false);
                            DownloadProgress progress = new DownloadProgress(list, sheduleDatetime, locationdlpath);
                            this.getParent().add(progress).setVisible(true); // (new DownloadSchduler()).beep(sheduleDatetime);
                            // This will only create instance of Thread class // it will not start until you call start() method Thread T1 = new Thread(task);
                            // setVisible(false); //you can't see me!
                            //dispose(); //
                            // setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                            /// DownloadProgress progress = new DownloadProgress();
                            // progress.setVisible(true);
                            // this.getParent().add(progress);
                        } catch (ClassNotFoundException ex) {

                            Logger.getLogger(DownloadSchduler.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(DownloadSchduler.class.getName()).log(Level.SEVERE, null, ex);
                        } finally {
                            // validateObject();
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Download url list empty");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter futher time for download time");
                }

            } catch (ParseException ex) {
                Logger.getLogger(DownloadSchduler.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid download schedule time");
        }

    }//GEN-LAST:event_btSubmit2ActionPerformed

    private void tflocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tflocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tflocationActionPerformed

    private void btlocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlocationActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        // chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());
            File file = chooser.getSelectedFile();
            tflocation.setText(file.getAbsolutePath());
        } else {
            System.out.println("No Selection ");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btlocationActionPerformed

    private void btSubmit3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSubmit3ActionPerformed
        // TODO add your handling code here:De\\\
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        if (jTable1.getSelectedRowCount() == 1) {
            tblModel.removeRow(jTable1.getSelectedRow());
        } else if (jTable1.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Table is empty");
        } else {
            JOptionPane.showMessageDialog(this, "Please select single row for delete");
        }
    }//GEN-LAST:event_btSubmit3ActionPerformed

    private void addSubmit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubmit1ActionPerformed
        // TODO add your handling code here:
        String link = tfDescription1.getText();
        if (link == null || link.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter valid url");
        } else if ((link.startsWith("http")) || (link.startsWith("https"))) {
            //String data[] = {link};
            DefaultTableModel tblmodel = (DefaultTableModel) jTable1.getModel();

            Object rowData[] = new Object[2];
            //   rowData[0] = tblmodel.getRowCount() + 1;
            rowData[0] = link;
            rowData[1] = Shared.STATUS_PENDING;
            tblmodel.addRow(rowData);

        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Valid URL");

        }
        tfDescription1.setText("");
    }//GEN-LAST:event_addSubmit1ActionPerformed

    private void tfDescription1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDescription1ActionPerformed
        tfDescription1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    System.out.println("aaaa");
                    String link = tfDescription1.getText();
                    if (link == null || link.isEmpty()) {
                        //JOptionPane.showMessageDialog(this, "Please enter valid url");
                    } else if ((link.startsWith("http")) || (link.startsWith("https"))) {
                        //String data[] = {link};
                        DefaultTableModel tblmodel = (DefaultTableModel) jTable1.getModel();

                        Object rowData[] = new Object[3];
                        rowData[0] = tblmodel.getRowCount() + 1;
                        rowData[1] = link;
                        rowData[2] = Shared.STATUS_PENDING;
                        tblmodel.addRow(rowData);

                    } else {
                        //  JOptionPane.showMessageDialog(this, "Please Enter Valid URL");

                    }
                    tfDescription1.setText("");
                }
            }
        });        // TODO add your handling code here:
    }//GEN-LAST:event_tfDescription1ActionPerformed
    public void cloackHandler(String sheString) {

        String dateStop = sheString;

        //HH converts hour in 24 hours format (0-23), day calculation
        SimpleDateFormat format = new SimpleDateFormat(Shared.DF_TRANSACTION_DATE_FORMAT);
        String dateStart = format.format(new Date());

        Date d1 = null;
        Date d2 = null;

        try {
            d1 = format.parse(dateStart);
            d2 = format.parse(dateStop);

            //in milliseconds
            long diff = d2.getTime() - d1.getTime();

            long diffSeconds = diff / 1000 % 60;
            long diffMinutes = diff / (60 * 1000) % 60;
            long diffHours = diff / (60 * 60 * 1000) % 24;
            long diffDays = diff / (24 * 60 * 60 * 1000);

            System.out.print(diffDays + " days, ");
            System.out.print(diffHours + " hours, ");
            System.out.print(diffMinutes + " minutes, ");
            System.out.print(diffSeconds + " seconds.");

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void validateObject() {
        try {
            DBController controller = new DBController();
            SettingsData settings = controller.searchSetting(Shared.FIRE_TIME);
            SettingsData settings2 = controller.searchSetting(Shared.DL_LOCATION);
            boolean islocationset = false;
            boolean istimeset = false;
            if (settings != null && settings.getValue() != null && !settings.getValue().isEmpty()) {
                istimeset = true;
            }
            if (settings2 != null && settings2.getValue() != null && !settings2.getValue().isEmpty()) {
                islocationset = true;
            }
            if (istimeset == false && islocationset == false) {
                JOptionPane.showMessageDialog(this, "Please set the  download location and download start time");
            } else if (istimeset == false && islocationset == true) {
                JOptionPane.showMessageDialog(this, "Please set the  download start time");

            } else if (istimeset == true && islocationset == false) {
                JOptionPane.showMessageDialog(this, "Please set the  download location ");

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*
    private static class MyTimeTask extends TimerTask {

        DefaultTableModel tblModel = null;
        private JTable table = null;
        private JProgressBar progressBar = null;
        String sheduleDatetime = null;
        ArrayList<Link> list = null;

        MyTimeTask(ArrayList<Link> list, String sheduleDatetime) {
            this.list = list;
            this.sheduleDatetime = sheduleDatetime;
        }

        Downloader dl = new Downloader();

        public void run() {
            try {
                dl.downloadFileSchdule(false, sheduleDatetime);
            } catch (IOException ex) {
                Logger.getLogger(DownloadSchduler.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DownloadSchduler.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(DownloadSchduler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
     */
    public void setPermission(File file) throws IOException {
        Set<PosixFilePermission> perms = new HashSet<>();
        perms.add(PosixFilePermission.OWNER_READ);
        perms.add(PosixFilePermission.OWNER_WRITE);
        perms.add(PosixFilePermission.OWNER_EXECUTE);

        perms.add(PosixFilePermission.OTHERS_READ);
        perms.add(PosixFilePermission.OTHERS_WRITE);
        perms.add(PosixFilePermission.OTHERS_EXECUTE);

        perms.add(PosixFilePermission.GROUP_READ);
        perms.add(PosixFilePermission.GROUP_WRITE);
        perms.add(PosixFilePermission.GROUP_EXECUTE);

        Files.setPosixFilePermissions(file.toPath(), perms);
    }

    public void downloadFileSchdule(boolean iscancel, JTable table,
            JProgressBar progressBar, ArrayList<Link> objlist, DefaultTableModel tblModel) throws IOException, ClassNotFoundException, SQLException {
        DBController con = new DBController();
        String home = System.getProperty("user.home");
        File file = new File(home + "/Downloads/");
        String filepath = file.getPath();

        System.out.println("OS " + System.getProperty("os.name"));
        if (!System.getProperty("os.name").toLowerCase().startsWith("windows") && file.exists()) {
            setPermission(file);
            file.canExecute();
            file.canRead();
            file.canWrite();
            System.out.println("canExecute" + file.canExecute());
            System.out.println("canRead" + file.canRead());
            System.out.println("canWrite" + file.canWrite());

        }
        SimpleDateFormat df = new SimpleDateFormat("ddMMyy-hhmmss.SSS");
        ArrayList<Link> returnlist = new ArrayList<>();
        ArrayList<Link> list = objlist;
//        jProgressBar1.setMaximum(list.size());
        for (int i = 0; i < list.size(); i++) {
            Link link = list.get(i);
            if (link != null) {
                Link object = link;
                String filename = null;
                filename = "file_" + i + "_" + df.format(new Date());
                String filetype = null;
                this.filetype = filetype(object.getLink());
                filepath = filepath + "/" + filename;
                System.out.println("Download  LInk" + object.getLink());
                System.out.println("filepath" + filepath);
                boolean isdownload = false;
                try {
                    object.setStatus(Shared.STATUS_DOWNLOADING);
                    con.updateLink(object);
                    URL url = new URL(object.getLink());
                    rbc = Channels.newChannel(url.openStream());
                    chanellist.add(rbc);
                    filetype = FilenameUtils.getExtension(url.getPath());
                    fos = new FileOutputStream(filepath + "." + filetype);
                    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
                    isdownload = true;
                    link.setStatus(Shared.STATUS_COMPLETED);
                    int row = link.getId() - 1;
                    table.setValueAt(link.getStatus(), row, 2);
                    table.updateUI();
                    updateProgress(progressBar, link.getCompleteFactor());
                    object.setStatus(Shared.STATUS_COMPLETED);
                    returnlist.add(object);
                    con.updateLink(object);
                    fos.close();
                    rbc.close();
                } catch (Exception e) {
                    object.setStatus(Shared.STATUS_FAILD);
                    returnlist.add(object);
                    con.updateLink(object);
                    isdownload = false;
                } finally {
                }

            }
        }

    }

    class ParallelTask implements Runnable {

        Date sheduleDatetime = null;

        ParallelTask(Date sheduleDatetime) {
            this.sheduleDatetime = sheduleDatetime;
        }

        @Override
        public void run() {

            cloackHandler(formatdate.format(sheduleDatetime));
            System.out.println(Thread.currentThread().getName() + " is executing ParallelTask");
        }
    }

    private String filetype(String url) {
        String filetype = ".mp4";
        if (url.contains(".mp3")) {
            filetype = ".mp3";
        } else if (url.contains(".mp4")) {
            filetype = ".mp4";
        } else if (url.contains(".pdf")) {
            filetype = ".pdf";
        } else if (url.contains(".docx")) {
            filetype = ".docx";
        } else if (url.contains(".aif")) {
            filetype = ".aif";
        } else if (url.contains(".cda")) {
            filetype = ".cda";
        } else if (url.contains(".mid")) {
            filetype = ".mid";
        } else if (url.contains(".midi")) {
            filetype = ".midi";
        } else if (url.contains(".mpa")) {
            filetype = ".mpa";
        } else if (url.contains(".ogg")) {
            filetype = ".ogg";
        } else if (url.contains(".wav")) {
            filetype = ".wav";
        } else if (url.contains(".wma")) {
            filetype = ".wma";
        } else if (url.contains(".wpl")) {
            filetype = ".wpl";
        } else if (url.contains(".7z")) {
            filetype = ".7z";
        } else if (url.contains(".arj")) {
            filetype = ".arj";
        } else if (url.contains(".deb")) {
            filetype = ".deb";
        } else if (url.contains(".pkg")) {
            filetype = ".pkg";
        } else if (url.contains(".deb")) {
            filetype = ".deb";
        } else if (url.contains(".rar")) {
            filetype = ".rar";
        } else if (url.contains(".rpm")) {
            filetype = ".rpm";
        } else if (url.contains(".tar.gz ")) {
            filetype = ".tar.gz ";
        } else if (url.contains(".zip")) {
            filetype = ".zip";
        } else if (url.contains(".bin")) {
            filetype = ".bin";
        } else if (url.contains(".dmg")) {
            filetype = ".dmg";
        } else if (url.contains(".iso")) {
            filetype = ".iso";
        } else if (url.contains(".toast")) {
            filetype = ".toast";
        } else if (url.contains(".vcd")) {
            filetype = ".vcd";
        } else if (url.contains(".csv")) {
            filetype = ".csv";
        } else if (url.contains(".dat")) {
            filetype = ".dat";
        } else if (url.contains(".db")) {
            filetype = ".db";
        } else if (url.contains(".dbf")) {
            filetype = ".dbf";
        } else if (url.contains(".log")) {
            filetype = ".log";
        } else if (url.contains(".mdb")) {
            filetype = ".mdb";
        } else if (url.contains(".sav")) {
            filetype = ".sav";
        } else if (url.contains(".sql")) {
            filetype = ".sql";
        } else if (url.contains(".tar")) {
            filetype = ".tar";
        } else if (url.contains(".xml")) {
            filetype = ".xml";
        } else if (url.contains(".email")) {
            filetype = ".email";
        } else if (url.contains(".apk")) {
            filetype = ".apk";
        } else if (url.contains(".bat")) {
            filetype = ".bat";
        } else if (url.contains(".exe")) {
            filetype = ".exe";
        } else if (url.contains(".jpeg")) {
            filetype = ".jpeg";
        } else if (url.contains(".jpg")) {
            filetype = ".jpg";
        } else if (url.contains(".png")) {
            filetype = ".png";
        }
        return filetype;
    }

    public void beep(final Date sheduleDatetime) {
        final Runnable beeper = new Runnable() {
            public void run() {
                System.out.println("beep");
                try {
                    cloackHandler(formatdate.format(sheduleDatetime));
                    Thread.sleep(60000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        };
        final Runnable beeper2 = new Runnable() {
            public void run() {
                (new Thread(beeper)).start();
            }
        };
        final ScheduledFuture<?> beeperHandle = scheduler.scheduleAtFixedRate(beeper2, 1, 1, SECONDS);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSubmit1;
    private javax.swing.JButton btSubmit2;
    private javax.swing.JButton btSubmit3;
    private javax.swing.JButton btlocation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tfDescription1;
    private javax.swing.JTextField tfScheduleTime;
    private javax.swing.JTextField tflocation;
    // End of variables declaration//GEN-END:variables
}
