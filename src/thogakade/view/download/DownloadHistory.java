/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package thogakade.view.download;

import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeCellEditor;
import thogakade.Shared.Shared;
import thogakade.controllers.DBController;
import thogakade.handler.Downloader;
import thogakade.model.Link;
import thogakade.model.SettingsData;
import thogakade.view.Main;

/**
 *
 * @author cmjd
 */
public class DownloadHistory extends javax.swing.JInternalFrame {

    private static long LOOP_LENGTH = 85000000;

    /**
     * Creates new form CreateOrder
     */
    public DownloadHistory() {
        initComponents();
        //jTable1 = new JTable();
        //tfDescription.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tfDescription = new javax.swing.JTextField();
        addSubmit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/thogakade/icon/4206344.png"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Real Time Download");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search By Values", 0, 0, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(0, 24, 255))); // NOI18N

        jLabel5.setText("Download Link");

        tfDescription.setBackground(new java.awt.Color(255, 255, 255));
        tfDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDescriptionActionPerformed(evt);
            }
        });

        addSubmit.setBackground(new java.awt.Color(255, 255, 255));
        addSubmit.setText("Add");
        addSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tfDescription, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addSubmit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Links", 0, 0, new java.awt.Font("Dialog", 0, 12), java.awt.Color.blue)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Download Links", "Download Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setMinWidth(150);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubmitActionPerformed
        String link = tfDescription.getText();
        if (link == null || link.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter vlid link");
        } else if ((link.startsWith("http")) || (link.startsWith("https"))) {
            //String data[] = {link};
            DefaultTableModel tblmodel = (DefaultTableModel) jTable1.getModel();

            Object rowData[] = new Object[2];
            rowData[0] = link;
            rowData[1] = Shared.STATUS_PENDING;
            tblmodel.addRow(rowData);

        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Valid URL");

        }
        tfDescription.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_addSubmitActionPerformed
    void startDownload(Link link, DefaultTableModel tblModel, int i) {
        //this.getParent().add(jb).setVisible(true);
        // iterate(list);
        Downloader dl = new Downloader();
        try {
            link.setStatus(Shared.STATUS_DOWNLOADING);
            tblModel.setValueAt(link.getStatus(), i, 1);
            System.out.println("DL link");
            downloadFileNormal(link);
            link.setStatus(Shared.STATUS_COMPLETED);
            tblModel.setValueAt(link.getStatus(), i, 1);
            Thread.sleep(1000);
            System.out.println("link:" + link.getLink());
        } catch (IOException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(DownloadProgress.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void downloadFileNormal(Link link) throws IOException, ClassNotFoundException, SQLException {
        DBController con = new DBController();
        String home = System.getProperty("user.home");
        SimpleDateFormat df = new SimpleDateFormat("ddMMyy-hhmmss.SSS");
        String filename = "file_" + df.format(new Date());
        File file = new File(home + "/Downloads/");
        String filepath = file.getPath();
        ArrayList<Link> returnlist = new ArrayList<>();
        if (link != null) {
            Link object = link;
            String filetype = filetype(object.getLink());
            filepath = filepath + "/" + filename + filetype;
            System.out.println("Download  LInk" + object.getLink());
            System.out.println("filepath" + filepath);
            boolean isdownload = false;
            try {
                ReadableByteChannel rbc = null;
                FileOutputStream fos = null;
                URL url = new URL(object.getLink());
                rbc = Channels.newChannel(url.openStream());
                fos = new FileOutputStream(filepath);
                fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
                isdownload = true;
                object.setStatus(Shared.STATUS_COMPLETED);
                fos.close();
                rbc.close();
            } catch (Exception e) {
                object.setStatus(Shared.STATUS_FAILD);
                isdownload = false;
            } finally {
                // con.updateLink(object);
            }

        }

    }
    private void tfDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDescriptionActionPerformed
    private void validateObject() {
        try {
            DBController controller = new DBController();
            SettingsData settings = controller.searchSetting(Shared.FIRE_TIME);
            SettingsData settings2 = controller.searchSetting(Shared.DL_LOCATION);
            boolean islocationset = false;
            boolean istimeset = false;
            if (settings != null && settings.getValue() != null && !settings.getValue().isEmpty()) {
                istimeset = true;
            }
            if (settings2 != null && settings2.getValue() != null && !settings2.getValue().isEmpty()) {
                islocationset = true;
            }
            if (istimeset == false && islocationset == false) {
                JOptionPane.showMessageDialog(this, "Please set the  download location and download start time");
            } else if (istimeset == false && islocationset == true) {
                JOptionPane.showMessageDialog(this, "Please set the  download start time");

            } else if (istimeset == true && islocationset == false) {
                JOptionPane.showMessageDialog(this, "Please set the  download location ");

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String filetype(String url) {
        String filetype = ".mp4";
        if (url.contains(".mp3")) {
            filetype = ".mp3";
        } else if (url.contains(".mp4")) {
            filetype = ".mp4";
        } else if (url.contains(".pdf")) {
            filetype = ".pdf";
        } else if (url.contains(".docx")) {
            filetype = ".docx";
        } else if (url.contains(".aif")) {
            filetype = ".aif";
        } else if (url.contains(".cda")) {
            filetype = ".cda";
        } else if (url.contains(".mid")) {
            filetype = ".mid";
        } else if (url.contains(".midi")) {
            filetype = ".midi";
        } else if (url.contains(".mpa")) {
            filetype = ".mpa";
        } else if (url.contains(".ogg")) {
            filetype = ".ogg";
        } else if (url.contains(".wav")) {
            filetype = ".wav";
        } else if (url.contains(".wma")) {
            filetype = ".wma";
        } else if (url.contains(".wpl")) {
            filetype = ".wpl";
        } else if (url.contains(".7z")) {
            filetype = ".7z";
        } else if (url.contains(".arj")) {
            filetype = ".arj";
        } else if (url.contains(".deb")) {
            filetype = ".deb";
        } else if (url.contains(".pkg")) {
            filetype = ".pkg";
        } else if (url.contains(".deb")) {
            filetype = ".deb";
        } else if (url.contains(".rar")) {
            filetype = ".rar";
        } else if (url.contains(".rpm")) {
            filetype = ".rpm";
        } else if (url.contains(".tar.gz ")) {
            filetype = ".tar.gz ";
        } else if (url.contains(".zip")) {
            filetype = ".zip";
        } else if (url.contains(".bin")) {
            filetype = ".bin";
        } else if (url.contains(".dmg")) {
            filetype = ".dmg";
        } else if (url.contains(".iso")) {
            filetype = ".iso";
        } else if (url.contains(".toast")) {
            filetype = ".toast";
        } else if (url.contains(".vcd")) {
            filetype = ".vcd";
        } else if (url.contains(".csv")) {
            filetype = ".csv";
        } else if (url.contains(".dat")) {
            filetype = ".dat";
        } else if (url.contains(".db")) {
            filetype = ".db";
        } else if (url.contains(".dbf")) {
            filetype = ".dbf";
        } else if (url.contains(".log")) {
            filetype = ".log";
        } else if (url.contains(".mdb")) {
            filetype = ".mdb";
        } else if (url.contains(".sav")) {
            filetype = ".sav";
        } else if (url.contains(".sql")) {
            filetype = ".sql";
        } else if (url.contains(".tar")) {
            filetype = ".tar";
        } else if (url.contains(".xml")) {
            filetype = ".xml";
        } else if (url.contains(".email")) {
            filetype = ".email";
        } else if (url.contains(".apk")) {
            filetype = ".apk";
        } else if (url.contains(".bat")) {
            filetype = ".bat";
        } else if (url.contains(".exe")) {
            filetype = ".exe";
        } else if (url.contains(".jpeg")) {
            filetype = ".jpeg";
        } else if (url.contains(".jpg")) {
            filetype = ".jpg";
        } else if (url.contains(".png")) {
            filetype = ".png";
        }
        return filetype;
    }

    public class ProgressWorker extends SwingWorker<Void, Integer> {

        private final JProgressBar progress;

        public ProgressWorker(JProgressBar progress) {
            this.progress = progress;
        }

        @Override
        protected Void doInBackground() throws Exception {
            for (long i = LOOP_LENGTH; i > 0; i--) {
                final int progr = (int) ((100L * (LOOP_LENGTH - i)) / LOOP_LENGTH);
                publish(progr);
            }
            return null;
        }

        @Override
        protected void process(List<Integer> chunks) {
            progress.setValue(chunks.get(chunks.size() - 1));
            super.process(chunks);
        }

        @Override
        protected void done() {
            progress.setValue(100);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tfDescription;
    // End of variables declaration//GEN-END:variables
}
